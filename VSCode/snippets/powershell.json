{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "* Comment-Based Help": {
        "prefix": "cc",
        "body": [
            "<#",
            "\t.DESCRIPTION\n\t\t${2:1-sentence overview}\n",
            "\t.EXAMPLE\n\t\t${3:Example 1: Does this...}\n",
            "\t.PARAMETER ${4:<Parameter Name>}\n\t\t${5:Parameter description}\n",
            "\t.INPUTS\n\t\t${6:<Object Class>}\n\t\tYou can use the pipeline...\n",
            "\t.OUTPUTS\n\t\t${7:<Object Class> or No Output}\n",
            "\t.NOTES\n",
            "#>"        
        ],
        "description": "Add comment-based help"
    },
    "* Section": {
        "prefix": "ccc",
        "body": [
            "##################################################",
            "#",
            "# ${1: Section Description}",
            "#",
            "##################################################",
        ],
        "description": "Section separator"
    },
    "* Output Type Brief": {
        "prefix": "OutputType",
        "body": [
            "OutputType([${1:class}])"
        ],
        "description": "Output type"
    },
    "* Output Type Extended": {
        "prefix": "OutputType",
        "body": [
            "OutputType([${1:class}], ParameterSetName=\"\")$0"
        ],
        "description": "Output type"
    },
    "* Cmdlet Binding Brief": {
        "prefix": "CmdletBinding",
        "body": [
            "CmdletBinding($0)",
        ],
        "description": "Cmdlet Binding"
    },
    "* Cmdlet Binding Extended": {
        "prefix": "CmdletBinding",
        "body": [
            "CmdletBinding(SupportsShouldProcess=${1|$true,$false|},",
            "\tPositionalBinding=${2|$true,$false|},",
            "\tDefaultParameterSetName='',",
            "\tConfirmImpact=${3|'High','Medium','Low','None'|})]"
        ],
        "description": "Cmdlet Binding"
    },
    "* Parameter - Brief": {
        "prefix": "parameter",
        "body": [
            "Parameter($0)",
        ],
        "description": "A simple parameter declaration"
    },
    "* Parameter - Extended": {
        "prefix": "parameter",
        "body": [
            "# Parameter Arguments",
            "[Parameter(Mandatory=${1|$true,$false|},",
            "           Position=${2:0},",
            "           ParameterSetName=\"${3:ParameterSetName}\",",
            "           ValueFromPipeline=${4|$true,$false|}, # Use if the function accepts the entire object, not just a property from the object",
            "           ValueFromPipelineByPropertyName=${5|$false,$true|}, # Accepts input from a property of a pipeline object. Object property must have the same name as the parameter",
            "           ValueFromRemainingArguments,",
            "           HelpMessage=\"Brief description of parameter and value\"]",
            "# Parameter Attributes",
            "[Alias(\"CN\", \"MachineName\")]",
            "[SupportsWildcards()] # Parameter accepts wildcard values",
            "[AllowNull()]",
            "[AllowEmptyString()]",
            "[AllowEmptyCollection()]",
            "[ValidateCount(1,5)] # Specifies min and max number of parameters",
            "[ValidateLength(1,10)] # Specifies min and max number of characters",
            "[ValidatePattern(\"<regex>\")]",
            "[ValidateRange(0,10)] # Can also specify \"Positive\", \"Negative\", \"NonPositive\", \"NonNegative\"",
            "[ValidateScript({\\$_ -ge (Get-Date)})]",
            "[ValidateSet(\"Chocolate\", \"Strawberry\", \"Vanilla\")]",
            "[ValidateNotNull()]",
            "[ValidateNotNullOrEmpty()] # Can't be \\$null or empty string",
            "[ValidateDrive(\"C\", \"D\", \"Variable\", \"Function\")] # Parameter must start w/ path",
            "[ValidateUserDrive()] # Parameter must include user path",
            "[ArgumentCompletions(\"Apple\", \"Banana\", \"Orange\")]",
            "[ArgumentCompleter({param()implementation})] # Unrolls completion values based on other specified parameters",
            "[string[]]\\$${7:ParameterName}",
        ],
        "description": "Extended parameter declaration"

    },
    "* err Warning": {
        "prefix": "err",
        "body": [
            "\\$msg = \\$_.Exception.Message",
            "Write-Warning \\$msg"
        ],
        "description": "Default catch handler block"
    },
    "* err Simple": {
        "prefix": "err",
        "body": [
            "\\$errMsg = \\$_.Exception.Message",
            "\\$msg = \"${1:Enter a message}\"",
            "\\$errorDetail = \"Here's the error:`n`n\\$errMsg`n\"",
            "Write-Error \"\\$msg \\$errorDetail\"",
        ],
        "description": "Simple error info"
    },
    "* err Detailed": {
        "prefix": "err",
        "body": [
            "\\$errMsg = \\$_.Exception.Message",
            "\\$invocationInfo = [PSCustomObject]@{",
            "\tScriptName = \\$_.InvocationInfo.ScriptName -Replace \".*\\\\\", \"\"",
            "\tCommand = (\\$_.InvocationInfo.Line).trim()",
            "\tLineNumber = \\$_.InvocationInfo.ScriptLineNumber",
            "\tOffset = \\$_.InvocationInfo.OffsetInLine",
            "}",
            "\\$invocationMsg = \\$invocationInfo | Format-List | Out-String",
            "\\$msg = \"${1:Enter a message}\"",
            "\\$errorDetail = \"Here's the error:`n`n\\$err`n\\$invocationMsg\"",
            "Write-Error \"\\$msg \\$errorDetail\"",
        ],
        "description": "Detailed error info"
    },
}
